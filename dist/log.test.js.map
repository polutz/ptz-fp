{"version":3,"sources":["../dist-esnext/log.test.js"],"names":["P","describe","it","a","x","b","pipe","log","ptzLogColor","obj","loggedObj"],"mappings":";;AAAA;;AACA;;;;AACA;;IAAYA,C;;;;;;AACZC,SAAS,KAAT,EAAgB,YAAM;AAClBC,OAAG,iBAAH,EAAsB,YAAM;AACxB,YAAMC,IAAI,SAAJA,CAAI,CAACC,CAAD;AAAA,mBAAOA,CAAP;AAAA,SAAV;AACA,YAAMC,IAAI,SAAJA,CAAI,CAACD,CAAD;AAAA,mBAAOA,CAAP;AAAA,SAAV;AACA,YAAME,OAAO,gBAAEA,IAAF,CAAOH,CAAP,EAAUH,EAAEO,GAAF,CAAM,EAAEC,aAAa,MAAf,EAAN,EAA+B,SAA/B,CAAV,EAAqDH,CAArD,EAAwDL,EAAEO,GAAF,CAAM,EAAEC,aAAa,KAAf,EAAN,EAA8B,SAA9B,CAAxD,CAAb;AACA,YAAMC,MAAM;AACRN,eAAG;AACCE,mBAAG;AADJ;AADK,SAAZ;AAKA,YAAMK,YAAYJ,KAAKG,GAAL,CAAlB;AACA,8BAAMA,GAAN,EAAWC,SAAX;AACH,KAXD;AAYH,CAbD;AAcA","file":"log.test.js","sourcesContent":["import { equal } from 'ptz-assert';\nimport R from 'ramda';\nimport * as P from './index';\ndescribe('log', () => {\n    it('return same obj', () => {\n        const a = (x) => x;\n        const b = (x) => x;\n        const pipe = R.pipe(a, P.log({ ptzLogColor: 'blue' }, 'after a'), b, P.log({ ptzLogColor: 'red' }, 'after b'));\n        const obj = {\n            a: {\n                b: 'teste'\n            }\n        };\n        const loggedObj = pipe(obj);\n        equal(obj, loggedObj);\n    });\n});\n//# sourceMappingURL=log.test.js.map"]}